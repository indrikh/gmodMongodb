name: Build Linux Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Позволяет запускать workflow вручную

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [64, 32]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libssl-dev \
          libsasl2-dev \
          zlib1g-dev \
          pkg-config

        # Для 32-битной сборки
        if [ "${{ matrix.arch }}" = "32" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            gcc-multilib \
            g++-multilib \
            libssl-dev:i386 \
            libsasl2-dev:i386 \
            zlib1g-dev:i386
        fi
    
    - name: Download and build MongoDB C Driver
      run: |
        # Устанавливаем MongoDB C Driver
        curl -L -O https://github.com/mongodb/mongo-c-driver/releases/download/1.23.1/mongo-c-driver-1.23.1.tar.gz
        tar xzf mongo-c-driver-1.23.1.tar.gz
        cd mongo-c-driver-1.23.1

        # Отключаем проблемную загрузку криптографических компонентов
        sed -i 's/get-crypt_shared//' CMakeLists.txt
        
        # Параметры для 32/64-битной сборки
        BUILD_FLAGS=""
        INSTALL_DIR="${GITHUB_WORKSPACE}/mongo-c-install"
        if [ "${{ matrix.arch }}" = "32" ]; then
          BUILD_FLAGS="-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32"
          INSTALL_DIR="${INSTALL_DIR}32"
          export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
        else
          INSTALL_DIR="${INSTALL_DIR}64"
        fi
        
        mkdir cmake-build && cd cmake-build
        cmake ${BUILD_FLAGS} \
          -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF \
          -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
          -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_MONGOC=ON \
          -DENABLE_BSON=ON \
          -DENABLE_TESTS=OFF \
          -DENABLE_EXAMPLES=OFF \
          -DENABLE_EXTRA_ALIGNMENT=OFF \
          ..
        
        make -j4
        make install
        cd ../..
    
    - name: Download and build MongoDB C++ Driver
      run: |
        # Устанавливаем MongoDB C++ Driver
        curl -L -O https://github.com/mongodb/mongo-cxx-driver/archive/refs/tags/r3.7.0.tar.gz
        tar xzf r3.7.0.tar.gz
        cd mongo-cxx-driver-r3.7.0
        
        # Параметры для 32/64-битной сборки
        BUILD_FLAGS=""
        INSTALL_DIR="${GITHUB_WORKSPACE}/mongo-c-install"
        if [ "${{ matrix.arch }}" = "32" ]; then
          BUILD_FLAGS="-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32"
          INSTALL_DIR="${INSTALL_DIR}32"
        else
          INSTALL_DIR="${INSTALL_DIR}64"
        fi
        
        mkdir cmake-build && cd cmake-build
        cmake ${BUILD_FLAGS} \
          -DCMAKE_CXX_STANDARD=14 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${INSTALL_DIR} \
          -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
          ..
        
        make -j4
        make install
        cd ../..
    
    - name: Create MongoDB directory structure for module
      run: |
        # Создаем структуру директорий, требуемую для нашего модуля
        mkdir -p MongoDB/include

        # Копируем заголовочные файлы
        cp -r mongo-c-install${{ matrix.arch }}/include/* MongoDB/include/

        # Копирование заголовочных файлов MongoDB C++ Driver
        cp -r mongo-cxx-driver-r3.7.0/include/mongocxx MongoDB/include/
        cp -r mongo-cxx-driver-r3.7.0/include/bsoncxx MongoDB/include/

        # Создаем директории для библиотек в зависимости от архитектуры
        if [ "${{ matrix.arch }}" = "32" ]; then
          mkdir -p MongoDB/lib/linux
          # Переименовываем библиотеки для соответствия нашей структуре проекта
          cp mongo-c-install32/lib/libmongoc-*.a MongoDB/lib/linux/libmongoc.a
          cp mongo-c-install32/lib/libbson-*.a MongoDB/lib/linux/libbson.a
          cp mongo-cxx-driver-r3.7.0/build/src/mongocxx/libmongocxx.a MongoDB/lib/linux/
          cp mongo-cxx-driver-r3.7.0/build/src/bsoncxx/libbsoncxx.a MongoDB/lib/linux/
        else
          mkdir -p MongoDB/lib64/linux
          # Переименовываем библиотеки для соответствия нашей структуре проекта
          cp mongo-c-install64/lib/libmongoc-*.a MongoDB/lib64/linux/libmongoc.a
          cp mongo-c-install64/lib/libbson-*.a MongoDB/lib64/linux/libbson.a
          cp mongo-cxx-driver-r3.7.0/build/src/mongocxx/libmongocxx.a MongoDB/lib64/linux/
          cp mongo-cxx-driver-r3.7.0/build/src/bsoncxx/libbsoncxx.a MongoDB/lib64/linux/
        fi
    
    # Фикс для проекта: определение статической переменной instance
    - name: Fix missing MongoDB instance definition
      run: |
        echo "// MongoDB static instance definition" > add_instance.cpp
        echo "#include \"src/mongodb/Database.h\"" >> add_instance.cpp
        echo "mongocxx::instance Database::m_instance = {};" >> add_instance.cpp
        mkdir -p src/mongodb
        mv add_instance.cpp src/mongodb/
    
    - name: Build gmodMongodb module
      run: |
        mkdir build && cd build
        
        # Параметры для 32/64-битной сборки
        CMAKE_ARGS=""
        if [ "${{ matrix.arch }}" = "32" ]; then
          CMAKE_ARGS="-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_FLAGS=-m32"
        fi
        
        cmake ${CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release ..
        make -j4 VERBOSE=1
    
    - name: Upload Linux binaries
      uses: actions/upload-artifact@v4
      with:
        name: gmodmongodb_linux${{ matrix.arch }}
        path: build/gmodmongodb_linux${{ matrix.arch }}.dll
        if-no-files-found: error